using Content.Client.Simulation;
using Content.Client.Simulation.ParticleKinds.Abstract;
using Robust.Client;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.GameObjects;
using Robust.Shared.Maths;

namespace Content.Client.GameView;

[GenerateTypedNameReferences]
public sealed partial class GameEditorView : BoxContainer
{
    [Dependency] private readonly IEntitySystemManager _entitySystemManager = default!;
    private SimulationSystem _simSys = default!;

    public GameEditorView()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _simSys = _entitySystemManager.GetEntitySystem<SimulationSystem>();

        SimControl.MinSize = new Vector2(SimulationConfig.SimWidth, SimulationConfig.SimHeight);
        Pause.OnToggled += args =>
        {
            _simSys.SimPaused = args.Pressed;
        };

        EraseMode.OnPressed += args =>
        {
            _simSys.Placing = ParticleType.NONE;
        };

        foreach (var impl in _simSys.Simulation.Implementations)
        {
            if (impl.Type == ParticleType.NONE)
                continue;

            var placeButton = new Button()
            {
                Text = impl.Name
            };

            placeButton.OnPressed += args =>
            {
                _simSys.Placing = impl.Type;
            };
            
            ElementPlaceButtons.AddChild(placeButton);
        }
    }
}